<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhf的博客</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://zzhf.github.com/"/>
  <updated>2017-09-07T17:35:48.768Z</updated>
  <id>https://zzhf.github.com/</id>
  
  <author>
    <name>zhf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6 编码规范</title>
    <link href="https://zzhf.github.com/2017/09/08/ES6-Coding-Style/"/>
    <id>https://zzhf.github.com/2017/09/08/ES6-Coding-Style/</id>
    <published>2017-09-07T16:42:23.000Z</published>
    <updated>2017-09-07T17:35:48.768Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要规范ES6及传统的JavaScript语法结合的编写风格，便于写出合理的、易于阅读的和维护的代码，<br>下面主要的内容是参考了阮一峰老师的 <a href="http://es6.ruanyifeng.com/#docs/style" target="_blank" rel="external">ECMAScript 6 入门</a>;</p>
<a id="more"></a>
<h4 id="1-块级作用域"><a href="#1-块级作用域" class="headerlink" title="1.块级作用域"></a>1.块级作用域</h4><h5 id="1-1-let取代var"><a href="#1-1-let取代var" class="headerlink" title="1.1 let取代var"></a>1.1 let取代var</h5><p>ES6提出了两个新的声明变量的命令： let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">	<span class="keyword">let</span> x = <span class="string">'Hello'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点。</p>
<p>var命令存在变量提升效用，let命令没有这个问题。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">	<span class="built_in">console</span>.log(x); <span class="comment">//ReferenceError</span></div><div class="line">	<span class="keyword">let</span> x = <span class="string">'Hello'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</p>
<p>所以，建议不再使用var命令，而是使用let命令取代。</p>
<h5 id="1-2-全局常量和线程安全"><a href="#1-2-全局常量和线程安全" class="headerlink" title="1.2 全局常量和线程安全"></a>1.2 全局常量和线程安全</h5><p>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。</p>
<p>const优于let有几个原因。一个是const可以提醒阅读程序的人，这个变量不应该改变；另一个是const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对const进行优化，所以多使用const，有利于提供程序的运行效率，也就是说let和const的本质区别，其实是编译器内部的处理不同。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bad</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">//good</span></div><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">//best</span></div><div class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div></pre></td></tr></table></figure>
<p>const声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。</p>
<p>所有的函数都应该设置为常量。</p>
<p>长远来看，JavaScript可能会有多线程的实现（比如Intel的River Trail那一类的项目），这时let表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。</p>
<h4 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h4><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bad</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">"foobar"</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">'foo'</span> + a + <span class="string">'bar'</span>;</div><div class="line"></div><div class="line"><span class="comment">//acceptable</span></div><div class="line"><span class="keyword">const</span> c = <span class="string">`foobar`</span>;</div><div class="line"></div><div class="line"><span class="comment">//good</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">'foobar'</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">`foo<span class="subst">$&#123;a&#125;</span>bar`</span>;</div></pre></td></tr></table></figure>
<h4 id="3-解构赋值"><a href="#3-解构赋值" class="headerlink" title="3.解构赋值"></a>3.解构赋值</h4><p>使用数组成员对变量赋值时，优先使用解构赋值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="comment">//bad</span></div><div class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">const</span> secod = arr[<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="comment">//good</span></div><div class="line"><span class="keyword">const</span>[first, second] = arr;</div></pre></td></tr></table></figure>
<p>函数的参数如果是对象的成员，优先使用解构赋值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bad </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">	<span class="keyword">const</span> firstName = user.firstName;</div><div class="line">	<span class="keyword">const</span> lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">	<span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//best</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure>
<h4 id="4-对象"><a href="#4-对象" class="headerlink" title="4.对象"></a>4.对象</h4><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</p>
<h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><p>未完待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要规范ES6及传统的JavaScript语法结合的编写风格，便于写出合理的、易于阅读的和维护的代码，&lt;br&gt;下面主要的内容是参考了阮一峰老师的 &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/style&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6 入门&lt;/a&gt;;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ES6 JavaScript" scheme="https://zzhf.github.com/tags/ES6-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>mongoose学习笔记</title>
    <link href="https://zzhf.github.com/2017/09/06/mongoose%20note/"/>
    <id>https://zzhf.github.com/2017/09/06/mongoose note/</id>
    <published>2017-09-06T14:14:51.000Z</published>
    <updated>2017-09-06T15:53:25.522Z</updated>
    
    <content type="html"><![CDATA[<p>最近在自己鼓捣node.js，尝试着使用express + mongoose搭建自己的web服务器，在这把mongoose的一些收获和知识点记录下来。<br>因为之前一直使用的是java操作MongoDB，对java实体类与Map对象的互转累觉不爱啊。<br><a id="more"></a></p>
<h4 id="Connect-to-MongoDB"><a href="#Connect-to-MongoDB" class="headerlink" title="Connect to MongoDB"></a>Connect to MongoDB</h4><figure class="highlight plain"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;);</div><div class="line">//连接Mongo数据库</div><div class="line">mongoose.connect(&apos;mongodb://localhost/test&apos;); </div><div class="line"></div><div class="line">//监听Mongo首次连接事件</div><div class="line">db.once(&apos;open&apos; ,() =&gt; &#123; </div><div class="line">	console.log(&apos;连接数据库成功&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//监听Mongo异常并重连</div><div class="line">db.on(&apos;error&apos;, function(error) &#123;</div><div class="line">    console.error(&apos;Error in MongoDb connection: &apos; + error);</div><div class="line">    mongoose.disconnect();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">db.on(&apos;close&apos;, function() &#123;</div><div class="line">    console.log(&apos;数据库断开，重新连接数据库&apos;);</div><div class="line">    mongoose.connect(config.url, &#123;server:&#123;auto_reconnect:true&#125;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h4><p>首次接触mongoose的是Schema。Schema可以理解为表结构的定义，虽然mongo并没有表这个概念，类似与java中pojo实体类。<br>定义一个简单的Scheam</p>
<figure class="highlight plain"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;);</div><div class="line">var Schema = mongoose.Schema;</div><div class="line"></div><div class="line">//定义对象blogSchema</div><div class="line">var blogSchema = new Schema(&#123;</div><div class="line">	title: String,</div><div class="line">	author: String,</div><div class="line">	body: String,</div><div class="line">	commets: [&#123;body: String, date: Date&#125;],</div><div class="line">	date: &#123;type: Date, defult: Date.now&#125;,</div><div class="line">	hidden: boolean,</div><div class="line">	meta: &#123;</div><div class="line">		votes: Number,</div><div class="line">		favs: Number</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//将blogSchema发布为model,并且指定collection名为blog_c;</div><div class="line">var blog = db.model(&apos;blog_c&apos;, blogSchema); </div></pre></td></tr></table></figure>
<p>Scheam只是单纯的定义了mongoDB里面的document结构，通过Scheam可以定义字段的类型、唯一性、索引和验证；</p>
<h4 id="Schema可以定义的字段的类型有："><a href="#Schema可以定义的字段的类型有：" class="headerlink" title="Schema可以定义的字段的类型有："></a>Schema可以定义的字段的类型有：</h4><ul>
<li>String   </li>
<li>Number    </li>
<li>Date        </li>
<li>Buffer    </li>
<li>Boolean    </li>
<li>Mixed        </li>
<li>ObjectId    </li>
<li>Array        </li>
</ul>
<h4 id="一个包含所有类型Schema的实现"><a href="#一个包含所有类型Schema的实现" class="headerlink" title="一个包含所有类型Schema的实现"></a>一个包含所有类型Schema的实现</h4><figure class="highlight plain"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;);</div><div class="line">var Schema = mongoose.Schema;</div><div class="line"></div><div class="line">var blogSchema = new Schema(&#123;</div><div class="line">	title: String,</div><div class="line">	author: String,</div><div class="line">	body: String,</div><div class="line">	commets: [&#123;body: String, date: Date&#125;],</div><div class="line">	date: &#123;type: Date, defult: Date.now&#125;,</div><div class="line">	hidden: boolean,</div><div class="line">	meta: &#123;</div><div class="line">		votes: Number,</div><div class="line">		favs: Number</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过执行node index.js就可以看见你的mongo库里面插入了一条包含各种数据类型的字段的Document记录；</p>
<h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><p>通过node+mongoose来操作Mongo确实比java来的方便的许多,比较JS原生支持json格式的数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在自己鼓捣node.js，尝试着使用express + mongoose搭建自己的web服务器，在这把mongoose的一些收获和知识点记录下来。&lt;br&gt;因为之前一直使用的是java操作MongoDB，对java实体类与Map对象的互转累觉不爱啊。&lt;br&gt;
    
    </summary>
    
    
      <category term="mongoose" scheme="https://zzhf.github.com/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title>Start Blog Journey</title>
    <link href="https://zzhf.github.com/2017/09/02/Start-Blog-Journey/"/>
    <id>https://zzhf.github.com/2017/09/02/Start-Blog-Journey/</id>
    <published>2017-09-01T16:41:51.000Z</published>
    <updated>2017-09-06T14:46:06.217Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始闲下来，兴趣之余决定开始搭建一个属于自己的博客。博客内容涉及的内容比较宽泛，涉及的话题主要有前端学习笔记及一些日常的牢骚，如果大家感兴趣的话可以访问我的 <a href="https://github.com/zzhf" target="_blank" rel="external">github</a> 关注。 如果有什么好的意见或建议可以在我的blog下提 <a href="https://github.com/zzhf/blog" target="_blank" rel="external">Issues</a> 。<br><a id="more"></a></p>
<h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><p>为了充分发扬拿来主义的精神，切忌重复造轮子。此博客系统是使用 <a href="https://hexo.io/" target="_blank" rel="external">hexo</a> 搭建，主题选用的是 <a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">apollo</a>。<br>在众多hexo主题当中，这个仿VUE中文站的风格确实是及其养眼的，尤其是在移动设备上的展示效果，毕竟<a href="https://cn.vuejs.org/" target="_blank" rel="external">VUE中文站</a> 移动端效果还是让人眼前一亮的。</p>
<p>第一次写blog也不知道要说点啥，那就点到为止吧。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello World! Hello Blog!</div></pre></td></tr></table></figure>
<p><img src="https://avatars2.githubusercontent.com/u/23414235" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始闲下来，兴趣之余决定开始搭建一个属于自己的博客。博客内容涉及的内容比较宽泛，涉及的话题主要有前端学习笔记及一些日常的牢骚，如果大家感兴趣的话可以访问我的 &lt;a href=&quot;https://github.com/zzhf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt; 关注。 如果有什么好的意见或建议可以在我的blog下提 &lt;a href=&quot;https://github.com/zzhf/blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Issues&lt;/a&gt; 。&lt;br&gt;
    
    </summary>
    
    
      <category term="Misc" scheme="https://zzhf.github.com/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zzhf.github.com/2017/09/02/hello-world/"/>
    <id>https://zzhf.github.com/2017/09/02/hello-world/</id>
    <published>2017-09-01T16:27:01.495Z</published>
    <updated>2017-09-01T16:27:01.495Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
